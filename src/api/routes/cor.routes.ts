import { auth } from "@cor-matrix/api/middleware/auth.middleware";
import { CodeOriginService } from "@cor-matrix/api/services/cor.service";
import { DatabaseService } from "@cor-matrix/db";
import { DI } from "@cor-matrix/di";
import Elysia, { t } from "elysia";

export default new Elysia({
  prefix: "/cors",
  name: "cor",
  tags: ["Code Origin Management"],
  aot: true,
  detail: {
    security: [{ bearerAuth: [] }],
    description: "Code Origin Management",
    summary: "Code Origin Management",
  },
})
  .decorate("cor", new CodeOriginService(DI.resolve(DatabaseService)))
  .use(auth({ bearerAuth: true }))
  .get(
    "/:workspaceId",
    async ({ cor, params: { workspaceId }, status }) => {
      try {
        const codeOriginRatios = await cor.getCodeOriginRatios(workspaceId);
        return status(200, {
          cors: codeOriginRatios,
        });
      } catch (error: any) {
        return status(500, {
          error: error.message,
          code: error.code || "INTERNAL_SERVER_ERROR",
          success: false,
        });
      }
    },
    {
      params: t.Object({
        workspaceId: t.String({
          description: "The ID of the workspace",
          examples: ["ws:01JWGPXJEC17YGK9X60P8RA8AZ"],
        }),
      }),
      detail: {
        summary: "Get code origin ratios",
        description: "Get code origin ratios",
      },
      response: {
        200: t.Object({
          cors: t.Array(
            t.Object({
              id: t.String({
                description: "The ID of the code origin ratio",
                examples: ["co:01JWGPXJEC17YGK9X60P8RA8AZ"],
              }),
              codeOriginRecordId: t.String({
                description: "The ID of the code origin record",
                examples: ["cr:01JWGPXJEC17YGK9X60P8RA8AZ"],
              }),
              order: t.Number({
                description: "The order of the code origin ratio",
                examples: [1],
              }),
              signature: t.String({
                description: "The signature of the code origin ratio",
                examples: [
                  "c0cf8f3e52c77197a7344aa30c52a98ae26b70ea1e7a4e84d15e4dc40ae8fc57",
                ],
              }),
              path: t.String({
                description: "The file path associated with the signature",
                examples: ["src/index.ts"],
              }),
            }),
          ),
        }),
        401: t.Object({
          success: t.Boolean({
            description: "Success status",
            examples: [false],
          }),
          code: t.String({
            description: "Error code",
            examples: ["UNAUTHORIZED"],
          }),
          error: t.String({
            description: "Error message",
            examples: ["Unauthorized"],
          }),
        }),
        500: t.Object({
          success: t.Boolean({
            description: "Success status",
            examples: [false],
          }),
          code: t.String({
            description: "Error code",
            examples: ["INTERNAL_SERVER_ERROR"],
          }),
          error: t.String({
            description: "Error message",
            examples: ["Internal server error"],
          }),
        }),
      },
    },
  )
  .post(
    "/:workspaceId",
    async ({ cor, params: { workspaceId }, body: { entries }, status }) => {
      try {
        const result = await cor.recordCodeOrigin(workspaceId, entries);
        return status(201, result);
      } catch (error: any) {
        return status(500, {
          error: error.message,
          code: error.code || "INTERNAL_SERVER_ERROR",
          success: false,
        });
      }
    },
    {
      params: t.Object({
        workspaceId: t.String({
          description: "The ID of the workspace",
          examples: ["ws:01JWGPXJEC17YGK9X60P8RA8AZ"],
        }),
      }),
      body: t.Object({
        entries: t.Array(
          t.Object({
            path: t.String({
              description: "The path of the file",
              examples: ["src/index.ts"],
            }),
            language: t.String({
              description: "The language of the file",
              examples: ["typescript"],
            }),
            timestamp: t.Number({
              description: "The timestamp of the file",
              examples: [1678901234],
            }),
            generatedBy: t.String({
              description: "The generated by of the file",
              examples: ["user"],
            }),
            cors: t.Array(
              t.Object({
                signature: t.String({
                  description: "The signature of the file",
                  examples: [
                    "c0cf8f3e52c77197a7344aa30c52a98ae26b70ea1e7a4e84d15e4dc40ae8fc57",
                  ],
                }),
                order: t.Number({
                  description: "The order of the file",
                  examples: [1],
                }),
              }),
            ),
          }),
        ),
      }),
      detail: {
        summary: "Record code origin",
        description: "Record code origin",
      },
      response: {
        201: t.Object({
          ok: t.Boolean(),
          message: t.String(),
        }),
        401: t.Object({
          success: t.Boolean({
            description: "Success status",
            examples: [false],
          }),
          code: t.String({
            description: "Error code",
            examples: ["UNAUTHORIZED"],
          }),
          error: t.String({
            description: "Error message",
            examples: ["Unauthorized"],
          }),
        }),
        500: t.Object({
          success: t.Boolean({
            description: "Success status",
            examples: [false],
          }),
          code: t.String({
            description: "Error code",
            examples: ["INTERNAL_SERVER_ERROR"],
          }),
          error: t.String({
            description: "Error message",
            examples: ["Internal server error"],
          }),
        }),
      },
    },
  );
